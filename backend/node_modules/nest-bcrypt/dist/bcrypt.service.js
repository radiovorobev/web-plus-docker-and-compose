"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BcryptService = void 0;
const common_1 = require("@nestjs/common");
const symbols_1 = require("./symbols");
const bcrypt = require("bcrypt");
let BcryptService = class BcryptService {
    constructor(options) {
        this.options = options;
        this.salt = options.salt;
    }
    compare(data, hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return bcrypt.compare(data, hash);
        });
    }
    compareSync(data, hash) {
        return bcrypt.compareSync(data, hash);
    }
    hash(data, salt) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _salt = (_a = salt !== null && salt !== void 0 ? salt : this.salt) !== null && _a !== void 0 ? _a : bcrypt.genSaltSync(10);
            return bcrypt.hash(data, _salt);
        });
    }
    hashSync(data, salt) {
        var _a;
        const _salt = (_a = salt !== null && salt !== void 0 ? salt : this.salt) !== null && _a !== void 0 ? _a : bcrypt.genSaltSync(10);
        return bcrypt.hashSync(data, _salt);
    }
    getRounds(hash) {
        return bcrypt.getRounds(hash);
    }
    genSalt(rounds, minor) {
        return __awaiter(this, void 0, void 0, function* () {
            return bcrypt.genSalt(rounds, minor);
        });
    }
    genSaltSync(rounds, minor) {
        return bcrypt.genSaltSync(rounds, minor);
    }
};
BcryptService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)(symbols_1.BCRYPT_MODULE_OPTIONS)),
    __metadata("design:paramtypes", [Object])
], BcryptService);
exports.BcryptService = BcryptService;
